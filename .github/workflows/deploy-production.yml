name: Deploy Frontend to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  NODE_VERSION: '18'

jobs:
  deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get EC2 Instance Details
      id: get-instance
      run: |
        # Get the instance created by backend terraform
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=production-crosslake-backend-instance" \
                    "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].InstanceId' \
          --output text)
        
        if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
          echo "❌ No running EC2 instance found for production"
          echo "ℹ️  Production infrastructure might not be set up yet"
          exit 1
        fi
        
        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        echo "api_url=http://$INSTANCE_IP" >> $GITHUB_OUTPUT
        
        echo "✅ Found instance: $INSTANCE_ID with IP: $INSTANCE_IP"
    
    - name: Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci
    
    - name: Run Tests
      run: |
        echo "🧪 Running tests..."
        npm test -- --passWithNoTests || true
    
    - name: Build Frontend
      env:
        VITE_API_URL: ${{ steps.get-instance.outputs.api_url }}
        NODE_ENV: production
      run: |
        echo "🔨 Building frontend for production with API URL: $VITE_API_URL"
        npm run build
        
        # Create deployment info file
        echo "{
          \"buildTime\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"commitSha\": \"${{ github.sha }}\",
          \"branch\": \"${{ github.ref_name }}\",
          \"environment\": \"production\",
          \"apiUrl\": \"$VITE_API_URL\"
        }" > dist/build-info.json
    
    # Rest of the workflow is similar to staging...
    # (Abbreviated for brevity - would include all the same deployment steps)